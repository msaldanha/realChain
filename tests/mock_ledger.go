// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msaldanha/realChain/ledger (interfaces: Ledger)

// Package tests is a generated GoMock package.
package tests

import (
	gomock "github.com/golang/mock/gomock"
	address "github.com/msaldanha/realChain/address"
	transaction "github.com/msaldanha/realChain/transaction"
	reflect "reflect"
)

// MockLedger is a mock of Ledger interface
type MockLedger struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerMockRecorder
}

// MockLedgerMockRecorder is the mock recorder for MockLedger
type MockLedgerMockRecorder struct {
	mock *MockLedger
}

// NewMockLedger creates a new mock instance
func NewMockLedger(ctrl *gomock.Controller) *MockLedger {
	mock := &MockLedger{ctrl: ctrl}
	mock.recorder = &MockLedgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLedger) EXPECT() *MockLedgerMockRecorder {
	return m.recorder
}

// AddAddress mocks base method
func (m *MockLedger) AddAddress(arg0 *address.Address) error {
	ret := m.ctrl.Call(m, "AddAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress
func (mr *MockLedgerMockRecorder) AddAddress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockLedger)(nil).AddAddress), arg0)
}

// GetAddressStatement mocks base method
func (m *MockLedger) GetAddressStatement(arg0 string) ([]*transaction.Transaction, error) {
	ret := m.ctrl.Call(m, "GetAddressStatement", arg0)
	ret0, _ := ret[0].([]*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressStatement indicates an expected call of GetAddressStatement
func (mr *MockLedgerMockRecorder) GetAddressStatement(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressStatement", reflect.TypeOf((*MockLedger)(nil).GetAddressStatement), arg0)
}

// GetLastTransaction mocks base method
func (m *MockLedger) GetLastTransaction(arg0 string) (*transaction.Transaction, error) {
	ret := m.ctrl.Call(m, "GetLastTransaction", arg0)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTransaction indicates an expected call of GetLastTransaction
func (mr *MockLedgerMockRecorder) GetLastTransaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTransaction", reflect.TypeOf((*MockLedger)(nil).GetLastTransaction), arg0)
}

// GetTransaction mocks base method
func (m *MockLedger) GetTransaction(arg0 string) (*transaction.Transaction, error) {
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockLedgerMockRecorder) GetTransaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockLedger)(nil).GetTransaction), arg0)
}

// HandleTransaction mocks base method
func (m *MockLedger) HandleTransaction(arg0 *transaction.Transaction) (*transaction.Transaction, error) {
	ret := m.ctrl.Call(m, "HandleTransaction", arg0)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTransaction indicates an expected call of HandleTransaction
func (mr *MockLedgerMockRecorder) HandleTransaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockLedger)(nil).HandleTransaction), arg0)
}

// HandleTransactionBytes mocks base method
func (m *MockLedger) HandleTransactionBytes(arg0 []byte) (*transaction.Transaction, error) {
	ret := m.ctrl.Call(m, "HandleTransactionBytes", arg0)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTransactionBytes indicates an expected call of HandleTransactionBytes
func (mr *MockLedgerMockRecorder) HandleTransactionBytes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransactionBytes", reflect.TypeOf((*MockLedger)(nil).HandleTransactionBytes), arg0)
}

// Initialize mocks base method
func (m *MockLedger) Initialize(arg0 float64) (*transaction.Transaction, *address.Address, error) {
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(*address.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Initialize indicates an expected call of Initialize
func (mr *MockLedgerMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockLedger)(nil).Initialize), arg0)
}

// Receive mocks base method
func (m *MockLedger) Receive(arg0 *transaction.Transaction) (string, error) {
	ret := m.ctrl.Call(m, "Receive", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive
func (mr *MockLedgerMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockLedger)(nil).Receive), arg0)
}

// VerifyTransaction mocks base method
func (m *MockLedger) VerifyTransaction(arg0 *transaction.Transaction, arg1 bool) error {
	ret := m.ctrl.Call(m, "VerifyTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTransaction indicates an expected call of VerifyTransaction
func (mr *MockLedgerMockRecorder) VerifyTransaction(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTransaction", reflect.TypeOf((*MockLedger)(nil).VerifyTransaction), arg0, arg1)
}
