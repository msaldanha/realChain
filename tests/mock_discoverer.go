// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msaldanha/realChain/peerdiscovery (interfaces: Discoverer)

// Package tests is a generated GoMock package.
package tests

import (
	gomock "github.com/golang/mock/gomock"
	consensus "github.com/msaldanha/realChain/consensus"
	reflect "reflect"
)

// MockDiscoverer is a mock of Discoverer interface
type MockDiscoverer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscovererMockRecorder
}

// MockDiscovererMockRecorder is the mock recorder for MockDiscoverer
type MockDiscovererMockRecorder struct {
	mock *MockDiscoverer
}

// NewMockDiscoverer creates a new mock instance
func NewMockDiscoverer(ctrl *gomock.Controller) *MockDiscoverer {
	mock := &MockDiscoverer{ctrl: ctrl}
	mock.recorder = &MockDiscovererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoverer) EXPECT() *MockDiscovererMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockDiscoverer) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockDiscovererMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDiscoverer)(nil).Init))
}

// Peers mocks base method
func (m *MockDiscoverer) Peers() ([]consensus.ConsensusClient, error) {
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].([]consensus.ConsensusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peers indicates an expected call of Peers
func (mr *MockDiscovererMockRecorder) Peers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockDiscoverer)(nil).Peers))
}
